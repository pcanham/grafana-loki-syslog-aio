#############################################################################
# Default syslog-ng.conf file which collects all local logs into a
# single file called /var/log/messages tailored to container usage.
#
# The changes from the stock, default syslog-ng.conf file is that we've
# dropped the system() source that is not needed and that we enabled network
# connections using default-network-drivers(). Customize as needed and
# override using the -v option to docker, such as:
#
#  docker run ...  -v "$PWD/syslog-ng.conf":/etc/syslog-ng/syslog-ng.conf
#

@version: 3.35


##############################################################################################
# SOURCE: https://github.com/abalage/balagetech-openwrt-syslog-ng-elasticsearch/blob/master/syslog-ng/etc/syslog-ng/syslog-ng.conf

#
# /etc/syslog-ng/syslog-ng.conf
#
# File format description can be found in syslog-ng.conf(5)
# and in /usr/share/doc/packages/syslog-ng/syslog-ng.txt.
#
# NOTE: The SuSEconfig script and its syslog-ng.conf.in
#       configuration template aren't used any more.
#
#       Feel free to edit this file directly.
#

# (chain_hostnames): Description: Enable or disable the chained hostname format. If a client sends the log message directly to the syslog-ng OSE server, the chain-hostnames() option is enabled on the server, and the client sends a hostname in the message that is different from its DNS hostname (as resolved from DNS by the syslog-ng OSE server), then the server can append the resolved hostname to the hostname in the message (separated with a / character) when the message is written to the destination.
# For example, consider a client-server scenario with the following hostnames: client-hostname-from-the-message, client-hostname-resolved-on-the-server, server-hostname. The hostname of the log message written to the destination depends on the keep-hostname() and the chain-hostnames() options. How keep-hostname() and chain-hostnames() options are related is described in the following table.

# (flush_lines): Description: Specifies how many lines are flushed to a destination at a time. The syslog-ng OSE application waits for this number of lines to accumulate and sends them off in a single batch. Increasing this number increases throughput as more messages are sent in a single batch, but also increases message latency.
# The syslog-ng OSE application flushes the messages if it has sent flush-lines() number of messages, or the queue became empty. If you stop or reload syslog-ng OSE or in case of network sources, the connection with the client is closed, syslog-ng OSE automatically sends the unsent messages to the destination.
# For optimal performance when sending messages to an syslog-ng OSE server, make sure that the flush-lines() is smaller than the window size set using the log-iw-size() option in the source of your server.

# (perm): Description: The permission mask of the file if it is created by syslog-ng. For octal numbers prefix the number with 0, for example use 0755 for rwxr-xr-x.
# To preserve the original properties of an existing file, use the option without specifying an attribute: perm().

# (stats_freq): Description: The period between two STATS messages in seconds. STATS are log messages sent by syslog-ng, containing statistics about dropped log messages. Set to 0 to disable the STATS messages.

# ts-format: Type:	rfc3164, bsd, rfc3339, iso
# Default:	rfc3164
# Description: Override the global timestamp format (set in the global ts-format() parameter) for the specific destination. For details, see ts-format().

#
# ===============================================================================================
# Global Options
# ===============================================================================================
# options { chain_hostnames(off); flush_lines(0); perm(0640); stats_freq(3600); threaded(yes); ts-format(iso); };
# options { threaded(yes); };

# SOURCE: https://github.com/splunk/splunk-connect-for-syslog/blob/main/package/etc/syslog-ng.conf
options {
        log_msg_size (65536);
        # Description: The syslog-ng OSE application can send the messages in a batch to the Riemann server. To send messages in batches, increase the flush-lines() parameter (by default, it is set to 1). The syslog-ng OSE application waits for this number of lines to accumulate, and sends them off in a single batch. Increasing this number increases throughput as more messages are sent in a single batch, but also increases message latency. Note that currently the riemann() destination does not have a timeout for sending messages if the batch is not full.
        # For example, if you set flush-lines() to 100, syslog-ng OSE waits for 100 messages. If the source sends a few messages, but less than 100 messages, syslog-ng OSE will not send the messages to the destination. If you stop or reload syslog-ng OSE or in case of network sources, the connection with the client is closed, syslog-ng OSE automatically sends the unsent messages to the destination.
        flush_lines (100);
        # Description: The time to wait in seconds before a dead connection is reestablished.
        time_reopen (10);
        log_fifo_size (10000);
        chain_hostnames (yes);
        use_dns (no);
        use_fqdn (no);
        dns-cache(no);
        create_dirs (no);
        keep-hostname (yes);
        create_dirs(yes);
        dir_perm(0750);
        stats-freq(30);
        stats-level(1);
        stats-max-dynamics(2000);
        normalize-hostnames(yes);
        on-error(fallback-to-string);
        # Description: The syslog-ng application can store fractions of a second in the timestamps according to the ISO8601 format. The frac-digits() parameter specifies the number of digits stored. The digits storing the fractions are padded by zeros if the original timestamp of the message specifies only seconds. Fractions can always be stored for the time the message was received. Note that syslog-ng can add the fractions to non-ISO8601 timestamps as well.
        frac-digits(3);
        recv-time-zone("Etc/UTC");
        send-time-zone("Etc/UTC");

};



@include "scl.conf"
@include "conf.d/sc4slib/*/*.conf"

# ===============================================================================================
# Global modules and includes.  All device-specific filters and destinations exist in conf.d
# Order is important; templates must be loaded first
# ===============================================================================================
@include "conf.d/conflib/_common/t_templates.conf"
@include "conf.d/conflib/_common/f_os.conf"
@include "conf.d/conflib/_common/syslog_format.conf"
@include "conf.d/conflib/_common/p_date-parser_nofilter.conf"
@include "conf.d/conflib/fallback/*.conf"
@include "conf.d/conflib/net_source/app-ubiquiti_unifi.conf"
# @include "conf.d/conflib/net_source/app-simple_source.conf"
@include "conf.d/conflib/raw/app-rfc5424.conf"
@include "conf.d/conflib/raw/app-syslog_epoch.conf"
@include "conf.d/conflib/raw/app-syslog_ISODATE.conf"
@include "conf.d/conflib/raw/app-syslog_json.conf"
@include "conf.d/conflib/raw/app-syslog-hostnodate.conf"
@include "conf.d/conflib/raw/app-ubiquiti_unifi.conf"
@include "conf.d/conflib/syslog/app-json.conf"
@include "conf.d/conflib/syslog/app-syslog-ng_error.conf"
@include "conf.d/conflib/syslog/app-syslog-ng_loggen.conf"


# ===============================================================================================
# Default message template
# ===============================================================================================
@define loki-template "t_standard"

# #
# # Filter definitions
# #
# filter f_iptables   { facility(kern) and message("IN=") and message("OUT="); };

# filter f_console    { level(warn) and facility(kern) and not filter(f_iptables)
#                     or level(err) and not facility(authpriv); };

# filter f_newsnotice { level(notice) and facility(news); };
# filter f_newscrit   { level(crit)   and facility(news); };
# filter f_newserr    { level(err)    and facility(news); };
# filter f_news       { facility(news); };

# filter f_mailinfo   { level(info)      and facility(mail); };
# filter f_mailwarn   { level(warn)      and facility(mail); };
# filter f_mailerr    { level(err, crit) and facility(mail); };
# filter f_mail       { facility(mail); };

# filter f_cron       { facility(cron); };

# filter f_local      { facility(local0, local1, local2, local3,
#                             local4, local5, local6, local7); };

# #
# # acpid messages
# #
# filter f_acpid_full { program('acpid'); };
# filter f_acpid      { level(emerg..notice) and program('acpid'); };

# # this is for the old acpid < 1.0.6
# filter f_acpid_old  { program('^\[acpid\]$'); };

# filter f_netmgm     { program('NetworkManager') or program('nm-dispatcher'); };

# # filter f_messages   { not facility(news, mail) and not filter(f_iptables) and not filter(f_ulogd) and not filter(f_unbound); };
# filter f_messages   { not facility(news, mail) and not filter(f_iptables); };
# filter f_warn       { level(warn, err, crit) and not filter(f_iptables); };
# filter f_alert      { level(alert); };


# # #
# # # News-messages in separate files:
# # #
# # destination newscrit   { file("/var/log/news/news.crit"
# #                               suppress(30) owner(news) group(news)); };
# # log { source(src); source(chroots); filter(f_newscrit); destination(newscrit); };

# # destination newserr    { file("/var/log/news/news.err"
# #                               suppress(30) owner(news) group(news)); };
# # log { source(src); source(chroots); filter(f_newserr); destination(newserr); };

# # destination newsnotice { file("/var/log/news/news.notice"
# #                               suppress(30) owner(news) group(news)); };
# # log { source(src); source(chroots); filter(f_newsnotice); destination(newsnotice); };

# ##############################################################################################

# ##########################################################################################
# # SOURCE: https://github.com/splunk/splunk-connect-for-syslog/blob/aea633d4623af5331167abc5227dab73b6637b04/package/etc/conf.d/conflib/_common/syslog_format.conf
# filter f_is_not_format{
#     not match("^.." value("fields.sc4s_syslog_format"))
# };
# rewrite set_rfc5424_strict{
#     set("rfc5424_strict" value("fields.sc4s_syslog_format"));
# };
# filter f_is_rfc5424_strict{
#     match("rfc5424_strict" value("fields.sc4s_syslog_format"))
# };
# rewrite set_rfc5424_noversion{
#     set("rfc5424_noversion" value("fields.sc4s_syslog_format"));
# };
# filter f_is_rfc5424_noversion{
#     match("rfc5424_noversion" value("fields.sc4s_syslog_format"))
# };
# rewrite set_rfc5424_epochtime{
#     set("rfc5424_epochtime" value("fields.sc4s_syslog_format"));
# };
# rewrite set_rfc3164_version{
#     set("rfc3164_version" value("fields.sc4s_syslog_format"));
# };
# filter f_is_rfc3164_version{
#     match("rfc3164_version" value("fields.sc4s_syslog_format"))
# };
# rewrite set_rfc3164_epoch{
#     set("rfc3164_epoch" value("fields.sc4s_syslog_format"));
# };
# rewrite set_rfc3164{
#     set("rfc3164"
#         value("fields.sc4s_syslog_format")
#         condition("${fields.sc4s_syslog_format}" eq "")
#     );
# };
# filter f_is_rfc3164{
#     match("rfc3164" value("fields.sc4s_syslog_format"))
# };

# filter f_is_nevermatch{
#     match("nevermatch" value("fields.sc4s_syslog_format"))
# };

# filter f_is_rfc3164_json{
#     match("rfc3164_json" value("fields.sc4s_syslog_format"))
# };
# rewrite set_rfc3164_json{
#     set("rfc3164_json" value("fields.sc4s_syslog_format"));
# };

# filter f_is_tcp_json{
#     match("tcp_json" value("fields.sc4s_syslog_format"))
# };
# rewrite set_tcp_json{
#     set("tcp_json" value("fields.sc4s_syslog_format"));
# };

# filter f_msg_is_tcp_json{
#     match("rfc3164_json" value("fields.sc4s_syslog_format"))
#     or
#     match("tcp_json" value("fields.sc4s_syslog_format"))
# };
# filter f_host_is_nil_or_ip{
#     host('^-') or
#     host('^((((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))|((([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))))$')
# };

# filter f_host_is_ip{
#     host('^((((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))|((([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))))$')
# };

# # SOURCE: https://github.com/splunk/splunk-connect-for-syslog/blob/aea633d4623af5331167abc5227dab73b6637b04/package/etc/conf.d/conflib/_common/f_os.conf
# filter f_nix_syslog {
#     (program("[a-zA-Z0-9\/\-]+")
#     and
#     match('[a-zA-Z\]]: $' value("LEGACY_MSGHDR")))
#     or match("rfc5424_strict" value("fields.sc4s_syslog_format"))
# };

# # SOURCE: https://github.com/splunk/splunk-connect-for-syslog/blob/aea633d4623af5331167abc5227dab73b6637b04/package/etc/conf.d/conflib/_common/p_date-parser_nofilter.conf
# block parser date-parser-nofilter(
#     format()
#     template()
#     ) {
#         channel {
#             if {
#                 parser {
#                     date-parser(format(`format`) template("`template`")
#                     flags(guess-timezone));
#                 };
#             } else {
#                 rewrite { set("dtparse: Expected: `format`; Actual: `template`" value("fields.sc4s_error")); };
#             };
#         };
#     };

# block parser date-parser-alts-nofilter(
#     fmt_one()
#     fmt_two()
#     template()) {
#     channel {
#         if {
#             parser {
#                 date-parser(format(`fmt_one`) template("`template`")
#                 flags(guess-timezone));
#             };
#             filter {
#                 '$(round $(- "$S_UNIXTIME" "$R_UNIXTIME"))' < "43200"
#                 and '$(round $(- "$S_UNIXTIME" "$R_UNIXTIME"))' > "-43200"
#             };
#         } elif {
#             parser {
#                 date-parser(format(`fmt_two`) template("`template`")
#                 flags(guess-timezone));
#             };
#             filter {
#                 '$(round $(- "$S_UNIXTIME" "$R_UNIXTIME"))' < "43200"
#                 and '$(round $(- "$S_UNIXTIME" "$R_UNIXTIME"))' > "-43200"
#             };
#         } else {
#             rewrite { set("dtparse: Expected: `fmt_one` OR `fmt_two`; Actual: `template`" value("fields.sc4s_error")); };
#         };
#     };
# };


# # SOURCE: https://github.com/splunk/splunk-connect-for-syslog/blob/aea633d4623af5331167abc5227dab73b6637b04/package/etc/conf.d/conflib/_common/t_templates.conf

# # ===============================================================================================
# # Templates for message formatting.  Overall JSON formatting for HEC/Kafka is handled in the
# # destination blocks.
# # ===============================================================================================

# # ===============================================================================================
# # Standard format; works for nearly all messages
# # ===============================================================================================

# template t_standard {
#         template("${MONTH_ABBREV} ${DAY} ${HOUR}:${MIN}:${SEC} ${HOST} ${MSGHDR}${MESSAGE}");
# };

# # ===============================================================================================
# # Message Only; useful for bluecoat proxy, palo alto, and others
# # ===============================================================================================

# template t_msg_only {
#         template("${MSGONLY}");
#         };

# # ===============================================================================================
# # Message Only trim leading or trailing white space
# # ===============================================================================================

# template t_msg_trim {
#         template("$(strip $MSGONLY )");
#         };
# # ===============================================================================================
# # Everything; useful for bluecoat proxy and others
# # ===============================================================================================

# template t_everything {
#         template("${ISODATE} ${HOST} ${LEGACY_MSGHDR}${MESSAGE}");
#         };

# # ===============================================================================================
# # Message Header with Message; for Palo Alto
# # ===============================================================================================

# template t_hdr_msg {
#         template("${MSGHDR}${MESSAGE}");
#         };

# template t_legacy_hdr_msg {
#         template("${LEGACY_MSGHDR}${MESSAGE}");
#         };

# template t_program_msg {
#         template("${PROGRAM}[${PID}]: ${MESSAGE}");
#         };

# template t_program_nopid_msg {
#         template("${PROGRAM}: ${MESSAGE}");
#         };

# # ===============================================================================================
# # Message Header, Structured Data (from RFC5424 parse) and Message; for Juniper
# # ===============================================================================================

# template t_hdr_sdata_msg {
#         template("${MSGHDR}${MSGID} ${SDATA} ${MESSAGE}");
#         };
# #Send RFC5424 message
# template t_5424_hdr_sdata_msg {
#         template('${ISODATE} $(if ("${HOST}" ne "") "${HOST}" "-") $(if ("${PROGRAM}" ne "") "${PROGRAM}" "-") $(if ("${PID}" ne "") "${PID}" "-") $(if ("${MSGID}" ne "") "${MSGID}" "-") $(if ("${SDATA}" ne "") "${SDATA}" "-") ${MESSAGE}');
#         };
# #drop sdata send message
# template t_5424_hdr_msg {
#         template('${ISODATE} $(if ("${HOST}" ne "") "${HOST}" "-") $(if ("${PROGRAM}" ne "") "${PROGRAM}" "-") $(if ("${PID}" ne "") "${PID}" "-") $(if ("${MSGID}" ne "") "${MSGID}" "-") - ${MESSAGE}');
#         };
# #Drop message send sdata
# template t_5424_hdr_sdata {
#         template('${ISODATE} $(if ("${HOST}" ne "") "${HOST}" "-") $(if ("${PROGRAM}" ne "") "${PROGRAM}" "-") $(if ("${PID}" ne "") "${PID}" "-") $(if ("${MSGID}" ne "") "${MSGID}" "-") $(if ("${SDATA}" ne "") "${SDATA}" "-")');
#         };

# # ===============================================================================================
# # JSON_3164; for JSON pretty-printing (for debugging)
# # ===============================================================================================

# template t_JSON_3164 {
#     template('$(format-json --scope rfc3164
#                 --pair PRI="<$PRI>"
#                 --key LEGACY_MSGHDR
#                 --key RAWMSG
#                 --exclude FACILITY
#                 --exclude PRIORITY
#                 )');
#     };

# # ===============================================================================================
# # JSON_5424; for JSON pretty-printing (standard output for RFC5424 messages in production)
# # Fields passed as indexed fields or as Splunk metadata are excluded
# # ===============================================================================================

# template t_JSON_5424 {
#     template('$(format-json --scope rfc5424
#                 --key RAWMSG
#                 --exclude DATE
#                 --exclude FACILITY
#                 --exclude PRIORITY
#                 --exclude HOST
#                 )');
#     };

# # ===============================================================================================
# # JSON_5424_ALL; for JSON pretty-printing (for printing all fields in RFC5424 message and ISO date)
# # Useful for log path development
# # ===============================================================================================

# template t_JSON_5424_ALL {
#     template('$(format-json --scope rfc5424
#                 --exclude DATE
#                 --key ISODATE
#                 --key RAWMSG
#                 )');
#     };

# # ===============================================================================================
# # JSON_5424_SDATA; for JSON pretty-printing (for RFC5424 messages with duplicate data in MESSAGE)
# # ===============================================================================================

# template t_JSON_5424_SDATA {
#     template('$(format-json --scope rfc5424
#                 --exclude DATE
#                 --exclude HOST
#                 --exclude FACILITY
#                 --exclude PRIORITY
#                 --exclude MESSAGE
#                 --exclude RAWMSG
#                 )');
#     };

# template t_snmp_trap {
#     template('$(format-json .snmp.* --rekey .snmp.* --shift-levels 2)');
#     };

# template t_fallback_kv {
#     template("$(if (\"${RAWMSG}\" ne \"\") \"RAWMSG=${RAWMSG}\n\" \"\")$(if (\"${PRI}\" ne \"\") \"PRI=${PRI}\n\" \"\")$(if (\"${LEGACY_MSGHDR}\" ne \"\") \"LEGACY_MSGHDR=${LEGACY_MSGHDR}\n\" \"\")$(if (\"${PROGRAM}\" ne \"\") \"PROGRAM=${PROGRAM}\n\" \"\")$(if (\"${PID}\" ne \"\") \"PID=${PID}\n\" \"\")$(if (\"${MESSAGE}\" ne \"\") \"MESSAGE=${MESSAGE}\n\" \"\")");
# };


# template-function "format-ewmm" "<$PRI>1 $ISODATE $LOGHOST @syslog-ng - - ${SDATA:--} $(format-json --leave-initial-dot --scope all-nv-pairs --exclude 0* --exclude 1* --exclude 2* --exclude 3* --exclude 4* --exclude 5* --exclude 6* --exclude 7* --exclude 8* --exclude 9* --exclude SOURCE --exclude .SDATA.* ._TAGS=${TAGS})\n";
# # Terms
# ################################################################################################

# # SOURCE: https://serverfault.com/questions/773040/syslog-ng-doesnt-parse-messages
# template remote_message {
#     template("${R_ISODATE} s=${SDATA} mesg=${MSGONLY}\n");
# };

# # source src {
# # 	#
# # 	# use system() for local logs
# # 	#
# # 	system();
# # 	#
# # 	# syslog-ng's internal messages
# # 	#
# # 	internal();
# # 	#
# # 	# uncomment to process log messages from network:
# # 	#
# # 	#udp(ip("0.0.0.0") port(514));
# # };


# source: Read, receive, and collect log messages
# https://www.syslog-ng.com/technical-documents/doc/syslog-ng-open-source-edition/3.30/administration-guide/16#TOPIC-956446
# A source is where syslog-ng receives log messages. Sources consist of one or more drivers, each defining where and how messages are received.
# internal(): Messages generated by syslog-ng.
# network(transport("udp")): Messages arriving to the 514/UDP port of any interface of the host.
# unix-dgram("/dev/log");: Messages arriving to the /dev/log socket.
# source s_demo {
#     internal();
#     network(transport("udp"));
#     unix-dgram("/dev/log");
# };
source s_local {
	#
	# syslog-ng's internal messages
	#
	internal();
};

# The default-network-drivers() source is a special source that uses multiple source drivers to receive and parse several different types of syslog messages from the network. Available in version 3.16 and later.
# Also, make sure that your SELinux, AppArmor, and firewall settings permit syslog-ng Open Source Edition to access the ports where you want to receive messages, and that no other application is using these ports. By default, the default-network-drivers() source accepts messages on the following ports:

# 514, both TCP and UDP, for RFC3164 (BSD-syslog) formatted traffic

# 601 TCP, for RFC5424 (IETF-syslog) formatted traffic

# 6514 TCP, for TLS-encrypted traffic
# https://www.syslog-ng.com/technical-documents/doc/syslog-ng-open-source-edition/3.30/administration-guide/18#TOPIC-1594914
source s_network {
	default-network-drivers(
		# NOTE: TLS support
		#
		# the default-network-drivers() source driver opens the TLS
		# enabled ports as well, however without an actual key/cert
		# pair they will not operate and syslog-ng would display a
		# warning at startup.
		#
		#tls(key-file("/path/to/ssl-private-key") cert-file("/path/to/ssl-cert"))
	);
};

destination d_loki {
	syslog("promtail" transport("tcp") port("1514"));
};

# Parser - p_iptables_parser
parser p_iptables_parser {
    iptables-parser(
    );
};

parser p_ubiquiti_unifi_fw {
    ubiquiti_unifi_fw-parser(
    );
};

parser p_ubiquiti_unifi {
    ubiquiti_unifi-parser(
    );
};


# # SOURCE: https://serverfault.com/questions/773040/syslog-ng-doesnt-parse-messages
# destination d_remote {
#     file(
#         "/var/log/remote.log"
#         owner(root)
#         group(root)
#         create_dirs(yes)
#         template(remote_message)
#     );
# };


log {
        source(s_local);
        source(s_network);
        parser(p_ubiquiti_unifi);
        parser(p_ubiquiti_unifi_fw);
        destination(d_loki);
        # destination(d_remote);
};


# #
# # News-messages in separate files:
# #
# destination newscrit   { file("/var/log/news/news.crit"
#                               suppress(30) owner(news) group(news)); };
# log { source(src); source(chroots); filter(f_newscrit); destination(newscrit); };

# destination newserr    { file("/var/log/news/news.err"
#                               suppress(30) owner(news) group(news)); };
# log { source(src); source(chroots); filter(f_newserr); destination(newserr); };

# destination newsnotice { file("/var/log/news/news.notice"
#                               suppress(30) owner(news) group(news)); };
# log { source(src); source(chroots); filter(f_newsnotice); destination(newsnotice); };

# #
# # and optionally also all in one file:
# # (don't forget to provide logrotation config)
# #
# #destination news { file("/var/log/news.all"); };
# #log { source(src); source(chroots); filter(f_news); destination(news); };


# #
# # Mail-messages in separate files:
# #
# destination mailinfo { file("/var/log/mail.info" suppress(30)); };
# log { source(src); source(chroots); filter(f_mailinfo); destination(mailinfo); };

# destination mailwarn { file("/var/log/mail.warn" suppress(30)); };
# log { source(src); source(chroots); filter(f_mailwarn); destination(mailwarn); };

# destination mailerr  { file("/var/log/mail.err"  suppress(30) fsync(yes)); };
# log { source(src); source(chroots); filter(f_mailerr);  destination(mailerr); };

# #
# # and also all in one file:
# #
# destination mail { file("/var/log/mail" suppress(30)); };
# log { source(src); source(chroots); filter(f_mail); destination(mail); };


# #
# # acpid messages in one file:
# #
# destination acpid { file("/var/log/acpid" suppress(30)); };
# destination devnull { };
# log { source(src); source(chroots); filter(f_acpid); destination(acpid); flags(final); };
# #
# # if you want more verbose acpid logging, comment the destination(null)
# # line and uncomment the destination(acpid) line
# #
# log { source(src); source(chroots); filter(f_acpid_full); destination(devnull); flags(final); };
# # log { source(src); source(chroots); filter(f_acpid_full); destination(acpid); flags(final); };
# #
# # old acpid < 1.0.6
# log { source(src); source(chroots); filter(f_acpid_old); destination(acpid); flags(final); };

# #
# # NetworkManager messages in one file:
# #
# destination netmgm { file("/var/log/NetworkManager" suppress(30)); };
# log { source(src); source(chroots); filter(f_netmgm); destination(netmgm); flags(final); };


# #
# # Cron-messages in one file:
# # (don't forget to provide logrotation config)
# #
# #destination cron { file("/var/log/cron" suppress(30)); };
# #log { source(src); source(chroots); filter(f_cron); destination(cron); };


# #
# # Some boot scripts use/require local[1-7]:
# #
# destination localmessages { file("/var/log/localmessages" suppress(30)); };
# log { source(src); source(chroots); filter(f_local); destination(localmessages); };


# #
# # All messages except iptables and the facilities news and mail:
# #
# destination messages { file("/var/log/messages" suppress(30) owner(-1) group(-1) perm(-1)); };
# log { source(s_network); filter(f_messages); destination(messages); destination(d_loki);  };


# #
# # Firewall (iptables) messages in one file:
# #
# destination firewall { file("/var/log/firewall" suppress(30)); };
# # destination firewall_loki { file("/var/log/firewall" suppress(30)); };
# log { source(s_network); filter(f_iptables); destination(firewall); destination(d_loki); };


# # source(s_network);
# # #
# # # Warnings (except iptables) in one file:
# # #
# # destination warn { file("/var/log/warn" suppress(30) fsync(yes)); };
# # log { source(src); source(chroots); filter(f_warn); destination(warn); };
